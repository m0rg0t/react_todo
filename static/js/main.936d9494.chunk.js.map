{"version":3,"sources":["models/GroupModel.js","reducers/cards/cardsSlice.js","reducers/groups/groupsSlice.js","app/store.js","components/header/Header.jsx","components/header/index.js","reducers/groups/groupsSlice_old.js","models/CardModel.js","components/todoCard/TodoCard.jsx","components/todoCard/index.js","components/todoGroup/TodoGroup.jsx","components/todoGroup/index.js","components/groups/Groups.jsx","App.js","serviceWorker.js","index.js"],"names":["GroupModel","name","cards","_name","this","_id","nanoid","id","value","cardsSlice","createSlice","initialState","reducers","add","state","action","payload","remove","update","removeByIds","map","cardId","actions","groupsSlice","addCardById","currentGroup","groupId","find","push","removeCardById","filter","configureStore","reducer","groups","groupReducer","cardsReducer","Header","dispatch","useDispatch","Group","align","Alignment","LEFT","Heading","Divider","className","icon","onClick","store","getState","count","Object","keys","length","toJSON","text","groupsSlice_old","selectAllGroups","CardModel","_text","cn","TodoCard","card","key","draggableId","index","shouldRespectForcePress","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","onChange","event","target","console","log","TodoGroup","group","useSelector","droppableId","placeholder","droppableProps","style","backgroundColor","isDraggingOver","multiline","minLines","content","addNewCard","removeCardsByIds","deleteGroupAndCards","Groups","allGroups","onDragEnd","e","fromGroup","toGroup","destination","source","entries","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.936d9494.chunk.js","sourcesContent":["import {nanoid} from \"@reduxjs/toolkit\";\r\n\r\nclass GroupModel {\r\n    _id;\r\n    _name = '';\r\n    constructor(name, cards = []) {\r\n        this._id = nanoid();\r\n        this.cards =  [...cards];\r\n        this._name = name;\r\n    }\r\n    cards = [];\r\n\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get name() {\r\n        return this._name;\r\n    }\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            name: this.name,\r\n            id: this._id,\r\n            cards: [...this.cards]\r\n        }\r\n    }\r\n}\r\n\r\nexport default GroupModel;","import {createSlice} from '@reduxjs/toolkit';\r\nimport { removeCardById } from \"../groups/groupsSlice\";\r\n\r\nexport const cardsSlice = createSlice({\r\n    name: 'cards',\r\n    initialState: {},\r\n    reducers: {\r\n        add: (state, action) => {\r\n            state[action.payload.id] = action.payload;\r\n        },\r\n        remove: (state, action) => {\r\n            if (state[action.payload]) {\r\n                delete state[action.payload];\r\n            }\r\n        },\r\n        update: (state, action) => {\r\n            if (state[action.payload.id]) {\r\n                state[action.payload.id] = action.payload;\r\n            }\r\n        },\r\n        removeByIds: (state, action) => {\r\n            action.payload.map(cardId => {\r\n                state[cardId] && delete state[cardId];\r\n                return cardId;\r\n            })\r\n        }\r\n    },\r\n});\r\n\r\nexport const removeCardInGroups = (cardId) => (dispatch, getState) => {\r\n    const {groups} = getState();\r\n    Object.keys(groups).map(groupId => {\r\n        dispatch(removeCardById({groupId, cardId}));\r\n        return groupId;\r\n    });\r\n}\r\n\r\nexport const {add, remove, update, removeByIds} = cardsSlice.actions;\r\n\r\nexport default cardsSlice.reducer;\r\n","import {createSlice} from '@reduxjs/toolkit';\r\nimport GroupModel from \"../../models/GroupModel\";\r\nimport {\r\n    add as addNewCard, removeByIds as removeCardsByIds\r\n} from 'reducers/cards/cardsSlice';\r\n\r\nexport const groupsSlice = createSlice({\r\n    name: 'groups',\r\n    initialState: {},\r\n    reducers: {\r\n        add: (state, action) => {\r\n            state[action.payload.id] = action.payload;\r\n        },\r\n        remove: (state, action) => {\r\n            if (state[action.payload]) {\r\n                delete state[action.payload];\r\n            }\r\n        },\r\n        update: (state, action) => {\r\n            if (state[action.payload.id]) {\r\n                state[action.payload.id] = action.payload;\r\n            }\r\n        },\r\n        addCardById: (state, action) => {\r\n            let currentGroup = state[action.payload.groupId];\r\n            if (currentGroup && !currentGroup.cards.find(id => id === action.payload.cardId)) {\r\n                currentGroup.cards.push(action.payload.cardId);\r\n                state[action.payload.groupId] = currentGroup;\r\n            }\r\n        },\r\n        removeCardById: (state, action) => {\r\n            let currentGroup = state[action.payload.groupId];\r\n            if (currentGroup) {\r\n                state[action.payload.groupId].cards = currentGroup.cards.filter(id => id !== action.payload.cardId);\r\n            }\r\n        }\r\n    },\r\n});\r\n\r\nexport const {add, remove, update, addCardById, removeCardById} = groupsSlice.actions;\r\n\r\nexport const moveFromGroup = (fromGroup, toGroup, cardId) => dispatch => {\r\n    dispatch(addCardById({groupId: toGroup, cardId: cardId}));\r\n    dispatch(removeCardById({groupId: fromGroup, cardId: cardId}));\r\n}\r\n\r\nexport const addDefaultCard = (state) => dispatch => {\r\n    const count = (Object.keys(state.groups).length + 1);\r\n    dispatch(add(\r\n        (new GroupModel(`Group${count}`)).toJSON()\r\n    ));\r\n};\r\n\r\nexport const deleteGroupAndCards = (group) => dispatch => {\r\n    dispatch(remove(group.id));\r\n    dispatch(removeCardsByIds(group.cards));\r\n};\r\n\r\nexport const addCard = (groupId, card) => dispatch => {\r\n    dispatch(addNewCard(card));\r\n    dispatch(addCardById({groupId: groupId, cardId: card.id}));\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default groupsSlice.reducer;\r\n","import {configureStore} from '@reduxjs/toolkit';\r\nimport cardsReducer from '../reducers/cards/cardsSlice';\r\nimport groupReducer from '../reducers/groups/groupsSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        groups: groupReducer,\r\n        cards: cardsReducer\r\n    }\r\n});\r\n","import React from 'react';\r\nimport {Button, Navbar, Alignment} from \"@blueprintjs/core\";\r\nimport './Header.css';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addDefaultCard} from \"../../reducers/groups/groupsSlice\";\r\nimport store from \"../../app/store\";\r\n\r\n\r\nfunction Header() {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <header>\r\n            <Navbar>\r\n                <Navbar.Group align={Alignment.LEFT}>\r\n                    <Navbar.Heading>React TODO app</Navbar.Heading>\r\n                    <Navbar.Divider/>\r\n                    <Button className=\"bp3-minimal\" icon=\"add\"\r\n                            onClick={() => dispatch(addDefaultCard(store.getState()))}\r\n                            text=\"Add Group\"/>\r\n                </Navbar.Group>\r\n            </Navbar>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import Header from './Header';\r\n\r\nexport default Header;","import { createSlice } from '@reduxjs/toolkit';\r\nimport GroupModel from 'models/GroupModel';\r\nimport {\r\n    add as addNewCard, removeByIds as removeCardsByIds\r\n} from 'reducers/cards/cardsSlice';\r\nimport store from \"../../app/store\";\r\n\r\n/*const getModelData = (payload) => {\r\n    let payloadData = payload;\r\n    if (payload instanceof GroupModel) {\r\n        payloadData = payload.toJSON();\r\n    }\r\n    return payloadData;\r\n}*/\r\n\r\nexport const groupsSlice_old = createSlice({\r\n    name: 'groups',\r\n    initialState: {},\r\n    reducers: {\r\n        add: (state, action) => {\r\n            state[action.payload.id] = action.payload;\r\n        },\r\n        remove: (state, action) => {\r\n            if (state[action.payload]) {\r\n                delete state[action.payload];\r\n            }\r\n        },\r\n        update: (state, action) => {\r\n            if (state[action.payload.id]) {\r\n                state[action.payload.id] = action.payload;\r\n            }\r\n        },\r\n        addCardById: (state, action) => {\r\n            let currentGroup = state[action.payload.groupId];\r\n            if (currentGroup && !currentGroup.cards.find(id => id === action.payload.cardId)) {\r\n                currentGroup.cards.push(action.payload.cardId);\r\n                state[action.payload.groupId] = currentGroup;\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nexport const addDefaultCard = () => dispatch => {\r\n    console.log(\"store.getState()\", store.getState());\r\n    const groupCount = Object.keys(store.getState().groups).length + 1;\r\n\r\n    dispatch(add(\r\n        (new GroupModel(`Group${groupCount}`)).toJSON()\r\n    ));\r\n};\r\n\r\nexport const deleteGroupAndCards = (group) => dispatch => {\r\n    dispatch(remove(group.id));\r\n    dispatch(removeCardsByIds(group.cards));\r\n};\r\n\r\nexport const addCard = (groupId, card) => dispatch => {\r\n    dispatch(addNewCard(card));\r\n    dispatch(addCardById({groupId: groupId, cardId: card.id }));\r\n};\r\n\r\nexport const { add, remove, update, addCardById } = groupsSlice_old.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectAllGroups = state => state.groups;\r\n\r\nexport default groupsSlice_old.reducer;\r\n","import { nanoid } from \"@reduxjs/toolkit\";\r\n\r\nclass CardModel {\r\n\r\n    _id;\r\n    _text = '';\r\n\r\n    /**\r\n     * \r\n     * @param {string} text \r\n     * @param {*} order \r\n     */\r\n    constructor(text= 'card', order = 0) {\r\n        this._id = nanoid();\r\n    }\r\n\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get text() {\r\n        return this._text;\r\n    }\r\n    set text(value) {\r\n        this._text = value;\r\n    }\r\n\r\n    toString() {\r\n        return this.text;\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            text: this.text,\r\n            id: this._id\r\n        }\r\n    }\r\n}\r\n\r\nexport default CardModel;","import React from 'react';\r\nimport {Button, Card} from \"@blueprintjs/core\";\r\nimport './TodoCard.css';\r\nimport {cn} from \"@bem-react/classname\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {update} from \"reducers/cards/cardsSlice\";\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\nimport {removeCardInGroups} from \"../../reducers/cards/cardsSlice\";\r\n\r\nconst className = cn('TodoCard');\r\n\r\nfunction TodoCard({card}) {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div className={className()}>\r\n            <Draggable key={card.id} draggableId={card.id} index={0} shouldRespectForcePress>\r\n                {(provided, snapshot) => (\r\n                    <div ref={provided.innerRef}\r\n                         {...provided.draggableProps}\r\n                         {...provided.dragHandleProps}>\r\n                        <Card className={className(\"Card\")}>\r\n                            {/*<EditableText multiline={true} minLines={3} maxLines={12} value={card.text}\r\n                                          onChange={(text) => {\r\n                                              dispatch(update({\r\n                                                  ...card, text\r\n                                              }));\r\n                                          }}/>*/}\r\n                            <textarea\r\n                                className={className('CardText')}\r\n                                value={card.text}\r\n                                      onChange={(event) => {\r\n                                          const text = event.target.value;\r\n                                          dispatch(update({\r\n                                              ...card, text\r\n                                          }));\r\n                                      }}/>\r\n                            <Button onClick={() => {\r\n                                console.log(\"clicked\");\r\n                                dispatch(removeCardInGroups(card.id));\r\n                            }\r\n                            } text={\"Delete card\"}/>\r\n                        </Card>\r\n                    </div>\r\n                )}\r\n            </Draggable>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoCard;","import TodoCard from './TodoCard';\r\n\r\nexport default TodoCard;","import React from 'react';\r\nimport {cn} from '@bem-react/classname';\r\nimport {Card, EditableText, Icon, Menu, MenuItem, Popover} from \"@blueprintjs/core\";\r\n\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    update, deleteGroupAndCards, addCard\r\n} from 'reducers/groups/groupsSlice_old';\r\nimport CardModel from \"models/CardModel\";\r\nimport TodoCard from \"components/todoCard\";\r\nimport './TodoGroup.css';\r\nimport {Droppable} from \"react-beautiful-dnd\";\r\n\r\nconst className = cn('TodoGroup');\r\n\r\n/**\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction TodoGroup({group}) {\r\n    const dispatch = useDispatch();\r\n\r\n    const cards = useSelector(state => {\r\n        return group.cards?.map(cardId => state.cards[cardId]);\r\n    });\r\n\r\n    return (\r\n        <div className={className()}>\r\n            <Droppable droppableId={group.id} placeholder={\"Droppable\"}>\r\n                {(provided, snapshot) => (\r\n                    <div ref={provided.innerRef}\r\n                         {...provided.droppableProps}\r\n                         style={{backgroundColor: snapshot.isDraggingOver ? 'black' : 'grey'}}>\r\n                        <Card className={className('Card')}>\r\n                            <div className={className(\"GroupHeader\")}>\r\n                                <EditableText multiline={false} minLines={1}\r\n                                              className={className('GroupName')}\r\n                                              onChange={(value) => {\r\n                                                  dispatch(update({\r\n                                                      ...group,\r\n                                                      name: value\r\n                                                  }));\r\n                                              }}\r\n                                              value={group.name}/>\r\n                                <Popover content={\r\n                                    <Menu>\r\n                                        <MenuItem text=\"Add card\"\r\n                                                  onClick={() => dispatch(\r\n                                                      addCard(group.id, (new CardModel('card text')).toJSON())\r\n                                                  )}/>\r\n                                        <MenuItem text=\"Copy\"/>\r\n                                        <MenuItem text=\"Delete\"\r\n                                                  onClick={() => dispatch(deleteGroupAndCards(group))}/>\r\n                                    </Menu>}>\r\n                                    <Icon icon=\"menu\" className={className('GroupMenu')}/>\r\n                                </Popover>\r\n                            </div>\r\n\r\n                        </Card>\r\n\r\n                        {\r\n                            cards.map(card => {\r\n                                return <TodoCard card={card}/>\r\n                            })\r\n                        }\r\n                    </div>\r\n                )}\r\n            </Droppable>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoGroup;","import TodoGroup from './TodoGroup';\r\n\r\nexport default TodoGroup;","import React from 'react';\r\nimport {cn} from \"@bem-react/classname\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport TodoGroup from \"components/todoGroup\";\r\nimport {selectAllGroups} from \"reducers/groups/groupsSlice_old\";\r\nimport './Groups.css';\r\nimport {DragDropContext} from \"react-beautiful-dnd\";\r\nimport {moveFromGroup} from \"../../reducers/groups/groupsSlice\";\r\n\r\nconst className = cn('Groups');\r\n\r\nfunction Groups() {\r\n    const dispatch = useDispatch();\r\n    const allGroups = useSelector(selectAllGroups);\r\n\r\n    const onDragEnd = (e) => {\r\n        console.log(\"onDragEnd\", e);\r\n        if (e.destination && e.source) {\r\n            dispatch(moveFromGroup(e.source.droppableId, e.destination.droppableId, e.draggableId));\r\n        }\r\n    };\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <div className={className()}>\r\n                {\r\n                    allGroups && Object.entries(allGroups).map(([id, group]) => {\r\n                        return <TodoGroup group={group} key={id}/>\r\n                    })\r\n                }\r\n            </div>\r\n        </DragDropContext>\r\n    );\r\n}\r\n\r\nexport default Groups;","import React from 'react';\r\nimport Header from \"components/header\";\r\n\r\n/**************** styles *************/\r\nimport \"normalize.css\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\nimport Groups from 'components/groups/Groups';\r\nimport './App.css';\r\n/*************************************/\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header/>\r\n      <main>\r\n          <Groups />\r\n      </main>\r\n      <footer>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}